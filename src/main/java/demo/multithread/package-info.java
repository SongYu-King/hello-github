/**
 * @file_name: package-info.java
 * @description
 * @author 王尚禹
 * @date 下午6:28:10
 * @version 1.0
 */
/**
 * @description
 * @author 王尚禹
 * @date 下午6:28:10
 * @version 1.0
 */
package demo.multithread;

/*
 * 生产者消费者问题是研究多线程程序时绕不开的问题，它的描述是有一块生产者和消费者共享的有界缓冲区，
 * 生产者往缓冲区放入产品，消费者从缓冲区取走产品，这个过程可以无休止的执行，不能因缓冲区满生产者放不进产品而终止，
 * 也不能因缓冲区空消费者无产品可取而终止。
 *
 * 解决生产者消费者问题的方法有两种，
 *     一种是采用某种机制保持生产者和消费者之间的同步
 *     一种是在生产者和消费者之间建立一个管道。
 * 前一种有较高的效率并且可控制性较好，比较常用，
 * 后一种由于管道缓冲区不易控制及被传输数据对象不易封装等原因，比较少用。
 *
 * 同步问题的核心在于，CPU是按时间片轮询的方式执行程序，
 * 我们无法知道某一个线程是否被执行、是否被抢占、是否结束等，
 * 因此生产者完全可能当缓冲区已满的时候还在放入产品，消费者也完全可能当缓冲区为空时还在取出产品。
 *
 * 现在同步问题的解决方法一般是采用信号或者加锁机制，
 * 即生产者线程当缓冲区已满时放弃自己的执行权，进入等待状态，并通知消费者线程执行。
 * 消费者线程当缓冲区已空时放弃自己的执行权，进入等待状态，并通知生产者线程执行。
 * 这样一来就保持了线程的同步，并避免了线程间互相等待而进入死锁状态。
 *
 * 在JAVA中，一共有四种方法支持同步，其中三个是同步方法，一个是管道方法。
 *   1.       方法wait()/notify()
 *   2.       方法await()/signal()
 *   3.       阻塞队列方法BlockingQueue
 *   4.       管道方法PipedInputStream/PipedOutputStream
 */


